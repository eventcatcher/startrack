// Di Jan 10 22:05:00 1996
// DSP2.LDF
// prototype-Version
// DSP-Reset und ChipSelect fuer DSP
// DSP-Port und Signal-Switch-Controller
//
// fuer DSP-Karte
//
LDF 1.00.00 DESIGNLDF;
DESIGN dsp2;
REVISION V1.0;
AUTHOR Stephan Wilhelm;
PROJECTNAME StarTrack;

PART ispLSI1016-60LJ;

DECLARE
END;  //DECLARE

SYM GLB  A0  1  pclk;
SIGTYPE HEN_OUT   Out ; // DSP-CS-Signal
SIGTYPE DSPRESET  Out ; // DSP-Reset-Signal
SIGTYPE DSPSTD    Out ; // Matrix STD-Signal
SIGTYPE GPOE0     OE  ; // Enable GPIO-Anschluss fuer DSP-Port

EQUATIONS

HEN_OUT = !(!HEN_IN & !A6 & !A4 & RST);

DSPRESET = !(!RST
           # DRESREG);


DSPSTD = !CONVREG & STD & !STDREG1 & !STDREG0
       # !CONVREG & R_DATA & !STDREG1 & STDREG0
       # !CONVREG & SRD & STDREG1
       # CONVREG & SHFTDO;

GPOE0 = GPIODIR0;

END;
END;


SYM GLB  A1  1  pfsync;
SIGTYPE SHFTDI    Out ; // zum Shifter-Data-Input
SIGTYPE GPIO0     Out ; // GPIO-Anschluss fuer DSP-Port
SIGTYPE GPIO1     Out ; // GPIO-Anschluss fuer DSP-Port
SIGTYPE GPIO2     Out ; // GPIO-Anschluss fuer DSP-Port

EQUATIONS

SHFTDI = STD & !STDREG1 & !STDREG0
      # R_DATA & !STDREG1 & STDREG0
      # SRD & STDREG1;

GPIO0 = RGPIO0;

GPIO1 = RGPIO1;

GPIO2 = RGPIO2;

END;
END;


SYM GLB  A2  1  count1;
SIGTYPE SC0REG    Reg ; // DSP-SC0 (mit SCLK) Analogschalter
SIGTYPE SC1REG    Reg ; // DSP-SC1 (mit DSP) Analogschalter 
SIGTYPE SC2REG    Reg ; // DSP-SC2 (mit DSP) Analogschalter 
SIGTYPE DRESREG   Reg ; // DSP-MakeReset-Register

EQUATIONS

SC0REG = BDI0;
SC0REG.PTCLK = REG1;
SC0REG.RE = !RST;

SC1REG = BDI1;
SC1REG.PTCLK = REG1;
SC1REG.RE = !RST;

SC2REG = BDI2;
SC2REG.PTCLK = REG1;
SC2REG.RE = !RST;

DRESREG = BD7;
DRESREG.PTCLK = REG1;
DRESREG.RE = !RST;

END;
END;

SYM GLB  A3  1  count2;
SIGTYPE DACH0     Reg ; // Wahl des DA-Kanals
SIGTYPE DACH1     Reg ; // Wahl des DA-Kanals
SIGTYPE REG1      Out ; // Node Register Nummer 1
SIGTYPE REG2      Out ; // Node Register Nummer 2

EQUATIONS

DACH0 = BD6;
DACH0.PTCLK = REG2;
DACH0.RE = !RST;

DACH1 = BD7;
DACH1.PTCLK = REG2;
DACH1.RE = !RST;

REG1 = !(!HEN_IN & !A6 & A4 & !A1 & !RW);

REG2 = !(!HEN_IN & !A6 & A4 & A1 & !RW);


END;
END;

SYM GLB  A4  1  adrdecode&clk;
SIGTYPE BDO0      Out ; // VME-Data0
SIGTYPE BDO1      Out ; // VME-Data0
SIGTYPE BDO2      Out ; // VME-Data0
SIGTYPE P_DATA    Out ; // P_DATA vom DSP-Port

EQUATIONS

P_DATA = SRD & !PDREG1 & !PDREG0
       # STD & !PDREG1 & PDREG0
       # R_DATA & PDREG1;

BDO0 = GPIN0;

BDO1 = GPIN1;

BDO2 = GPIN2;

END;
END;


SYM GLB  A5  1  sync1;
SIGTYPE RGPIO0    Reg ; // Node GPIO-Register fuer DSP-Port
SIGTYPE RGPIO1    Reg ; // Node GPIO-Register fuer DSP-Port
SIGTYPE RGPIO2    Reg ; // Node GPIO-Register fuer DSP-Port
SIGTYPE DRDOE     OE  ; // VME-Data-Enable

EQUATIONS

DRDOE = !HEN_IN & !A6 & A4 & A1 & RW;

RGPIO0 = BDI0;
RGPIO0.PTCLK = REG2;

RGPIO1 = BDI1;
RGPIO1.PTCLK = REG2;

RGPIO2 = BDI2;
RGPIO2.PTCLK = REG2;

END;
END;

SYM GLB  A6  1  sync2;
SIGTYPE GPIODIR0  Reg ; // Node GPIO-Richtungsflag fuer GPIO0
SIGTYPE GPIODIR1  Reg ; // Node GPIO-Richtungsflag fuer GPIO1
SIGTYPE GPIODIR2  Reg ; // Node GPIO-Richtungsflag fuer GPIO2

EQUATIONS

GPIODIR0 = BD3;
GPIODIR0.PTCLK = REG2;
GPIODIR0.RE = !RST;

GPIODIR1 = BD4;
GPIODIR1.PTCLK = REG2;
GPIODIR1.RE = !RST;

GPIODIR2 = BD5;
GPIODIR2.PTCLK = REG2;
GPIODIR2.RE = !RST;

END;
END;

SYM GLB  A7  1  clk64;
SIGTYPE SRDREG    Reg ; // Node Switch fuer SRD
SIGTYPE STDREG0   Reg ; // Node Switch fuer STD
SIGTYPE STDREG1   Reg ; // Node Switch fuer STD
SIGTYPE GPOE1     OE  ; // Enable GPIO-Anschluss fuer DSP-Port

EQUATIONS

SRDREG = BD3;
SRDREG.PTCLK = REG1;

STDREG0 = BD4;
STDREG0.PTCLK = REG1;

STDREG1 = BD5;
STDREG1.PTCLK = REG1;

GPOE1 = GPIODIR1;

END;
END;


SYM GLB  B0  1  clk64;
SIGTYPE GPOE2     OE  ; // Enable GPIO-Anschluss fuer DSP-Port
SIGTYPE CONVREG   Reg ; // Node Switch fuer Normal!Continuous

EQUATIONS

CONVREG = BD6;
CONVREG.PTCLK = REG1;

GPOE2 = GPIODIR2;

END;
END;

SYM GLB  B1  1  count2;
SIGTYPE PDREG0    Reg ; // Wahl der P_DATA-Daten
SIGTYPE PDREG1    Reg ; // Wahl der P_DATA-Daten

EQUATIONS

PDREG0 = BDI0;
PDREG0.PTCLK = !(!HEN_IN & A6 & !A4 & !A1 & !RW);
PDREG0.RE = !RST;

PDREG1 = BDI1;
PDREG1.PTCLK = !(!HEN_IN & A6 & !A4 & !A1 & !RW);
PDREG1.RE = !RST;

END;
END;


SYM IOC  I0  1 A6;
XPIN I XA6 LOCK 14;  // VME-A6
IB11(A6,XA6)
END;

SYM IOC  I1  1 SRD;
XPIN I XSRD LOCK 24;  // von Matrix-SRD
IB11(SRD,XSRD)
END;

SYM IOC  IO0  1 RST;
XPIN IO XRST LOCK 21;  // VME-RESET
IB11(RST,XRST)
END;

SYM IOC  IO1  1 A4;
XPIN IO XA4 LOCK 8;  // VME-A4
IB11(A4,XA4)
END;

SYM IOC  IO2  1 P_DATA;
XPIN IO XP_DATA LOCK 20;  // P_DATA von DSP-Port
OB11(XP_DATA,P_DATA)
END;

SYM IOC  IO3  1 A1;
XPIN IO XA1 LOCk 25;  // VME-A1
IB11(A1,XA1)
END;

SYM IOC  IO4  1 RW;
XPIN IO XRW LOCK 39;  // VME-Write
IB11(RW,XRW)
END;

SYM IOC  IO5  1 BD1;
XPIN IO XBD1 LOCK 31;  // VME-Data1
BI11(BDI1,XBD1,BDO1,DRDOE)
END;

SYM IOC  IO6  1 BD2;
XPIN IO XBD2 LOCK 18;  // VME-Data2
BI11(BDI2,XBD2,BDO2,DRDOE)
END;

SYM IOC  IO7  1 BD3;
XPIN IO XBD3 LOCK 15;  // VME-Data3
IB11(BD3,XBD3)
END;

SYM IOC  IO8  1 BD4;
XPIN IO XBD4 LOCK 4;  // VME-Data4
IB11(BD4,XBD4)
END;

SYM IOC  IO9  1 BD5;
XPIN IO XBD5 LOCK 9;  // VME-Data5
IB11(BD5,XBD5)
END;

SYM IOC  IO10  1 BD6;
XPIN IO XBD6 LOCK 42;  // VME-Data6
IB11(BD6,XBD6)
END;

SYM IOC  IO11  1 BD7;
XPIN IO XBD7 LOCK 37;  // VME-Data7
IB11(BD7,XBD7)
END;

SYM IOC  IO12  1 BD0;
XPIN IO XBD0 LOCK 26;  // VME-Data0
BI11(BDI0,XBD0,BDO0,DRDOE)
END;

SYM IOC  IO13  1 GPIO0;
XPIN IO XGPIO0 LOCK 16;  // GPIO-Anschluss fuer DSP-Port
BI11(GPIN0,XGPIO0,GPIO0,GPOE0)
END;

SYM IOC  IO14  1 GPIO1;
XPIN IO XGPIO1 LOCK 5;  // GPIO-Anschluss fuer DSP-Port
BI11(GPIN1,XGPIO1,GPIO1,GPOE1)
END;

SYM IOC  IO15  1 GPIO2;
XPIN IO XGPIO2 LOCK 10;  // GPIO-Anschluss fuer DSP-Port
BI11(GPIN2,XGPIO2,GPIO2,GPOE2)
END;

SYM IOC  IO16  1 SHFTDI;
XPIN IO XSHFTDI LOCK 19;  // zum Shifter-Data-Input
OB11(XSHFTDI,SHFTDI)
END;

SYM IOC  IO17  1 DRESREG;
XPIN IO XDRESREG LOCK 41;  // DSP-MakeReset-Register
OB11(XDRESREG,DRESREG)
END;

SYM IOC  IO18  1 DACH1;
XPIN IO XDACH1 LOCK 17;  // Wahl des DA-Kanals
OB11(XDACH1,DACH1)
END;

SYM IOC  IO19  1 DACH0;
XPIN IO XDACH0 LOCK 22;  // Wahl des DA-Kanals
OB11(XDACH0,DACH0)
END;

SYM IOC  IO20  1 SC0REG;
XPIN IO XSC0REG LOCK 44;  // DSP-SC0 (mit SCLK) Analogschalter
OB11(XSC0REG,SC0REG)
END;

SYM IOC  IO21  1 SC1REG;
XPIN IO XSC1REG LOCK 43;  // DSP-SC1 (mit DSP) Analogschalter
OB11(XSC1REG,SC1REG)
END;

SYM IOC  IO22  1 SC2REG;
XPIN IO XSC2REG LOCK 38;  // DSP-SC2 (mit DSP) Analogschalter
OB11(XSC2REG,SC2REG)
END;

SYM IOC  IO23  1 DSPSTD;
XPIN IO XDSPSTD LOCK 30;  // Matrix STD-Signal
OB11(XDSPSTD,DSPSTD)
END;

SYM IOC  IO24  1 SRDREG;
XPIN IO XSRDREG LOCK 32;  // Tristate DSP-SRD-Signal (zum DSP)
OB11(XSRDREG,SRDREG)
END;

SYM IOC  IO25  1 SHFTDO;
XPIN IO XSHFTDO LOCK 6;  // vom Shifter-Data-Output
IB11(SHFTDO,XSHFTDO)
END;

SYM IOC  IO27  1 R_DATA;
XPIN IO XR_DATA LOCK 40;  // von Dsp-Port R_DATA
IB11(R_DATA,XR_DATA)
END;

SYM IOC  IO28  1 STD;
XPIN IO XSTD LOCK 3;  // von DSP-STD
IB11(STD,XSTD)
END;

SYM IOC  IO29  1 HEN_IN;
XPIN IO XHEN_IN LOCK 7;  // DSP-CS-Signal von STARTRK3
IB11(HEN_IN,XHEN_IN)
END;

SYM IOC  IO30  1 HEN_OUT;
XPIN IO XHEN_OUT LOCK 27;  // DSP-CS-Signal
OB11(XHEN_OUT,HEN_OUT)
END;

SYM IOC  IO31  1 DSPRESET;
XPIN IO XDSPRESET LOCK 28;  // DSP-Reset-Signal
OB11(XDSPRESET,DSPRESET)
END;

