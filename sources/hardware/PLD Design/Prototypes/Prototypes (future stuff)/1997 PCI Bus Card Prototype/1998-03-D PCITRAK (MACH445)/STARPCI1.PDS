; ***************************************************************************
; MachXL Design Description
; ***************************************************************************

TITLE    PCITRAK MACH445 IC3
PATTERN  ic3.pds
REVISION 1.00
AUTHOR   S.W.
COMPANY  Stephan Wilhelm EntwicklungsbÅro
DATE     01/16/97

CHIP  MACH445  MACH445

; PCITRAK

; ***************************************************************************
; Pinbelegung
; ***************************************************************************

PIN  13          ck        ; Clock 40 MHz
PIN  63          selm      ; adress decoder from ic2
PIN  68          lreset    ; system reset
PIN  4           hold      ; bus access input
PIN  93          holda     ; bus access output
PIN  94          breq      ; bus request
PIN  96          readyi    ; dma request in
PIN  97          ads       ; adress select
PIN  98          wr        ; write
PIN  100         readyo    ; dma request out
PIN  5           ready     ; dma request
PIN  8           lint      ; interrupt
PIN  95          den       ; unused input from PCI
PIN  99          btermo    ; unused input from PCI
PIN  6           blast     ; unused input from PCI
PIN  7           bterm     ; unused input to PCI
PIN  9           linto     ; unused input from PCI
PIN  54          breqo     ; unused input from PCI
PIN  76          MCLK24    ; 24.576 MHz Mastertakt
PIN  31          lbe0      ; data-strobe 0
PIN  32          lbe1      ; data-strobe 1
PIN  33          lbe2      ; data-strobe 2
PIN  34          lbe3      ; data-strobe 3
PIN  19          ld0       ; pci data 0
PIN  20          ld1       ; pci data 1
PIN  21          ld2       ; pci data 2
PIN  22          ld3       ; pci data 3
PIN  23          ld4       ; pci data 4
PIN  24          ld5       ; pci data 5
PIN  25          ld6       ; pci data 6
PIN  26          ld7       ; pci data 7
PIN  44          la2       ; pci adress 2
PIN  43          la3       ; pci adress 3
PIN  38          la4       ; pci adress 4
PIN  37          la5       ; pci adress 5
PIN  36          la6       ; pci adress 6
PIN  35          la7       ; pci adress 7
PIN  71          la8       ; pci adress 8
PIN  49         PAFFLAG3   ; PlayFIFO Allmost-Full von FIFO3 (lowest)
PIN  50         PAEFLAG3   ; PlayFIFO Allmost Empty von FIFO3 (lowest)
PIN  18         RAFFLAG3   ; RecFIFO Allmost-Full
PIN  72         PEFLAG3    ; PlayFIFO Empty von FIFO 3 (lowest)
PIN  55         RD8        ; Sync-Datenausgang des PLAY-FIFO
PIN  62         CLKPLAY       REGISTERED ; CLK fÅr PCLK,Shifter und internal
PIN  56         PRCLK0        REGISTERED ; playfifo readclk D0-D7
PIN  57         PRCLK1        REGISTERED ; playfifo readclk D8-D15
PIN  58         PRCLK2        REGISTERED ; playfifo readclk D16-D23
PIN  59         PRCLK3        REGISTERED ; playfifo readclk D24-D31
PIN  12         fifoload      REGISTERED ; load fifoflags
PIN  45         smpwrite3     REGISTERED ; playfifo write 3
PIN  46         smpwrite2     REGISTERED ; playfifo write 2
PIN  47         smpwrite1     REGISTERED ; playfifo write 1
PIN  48         smpwrite0     REGISTERED ; playfifo write 0
PIN  88         SHIFTLD0      REGISTERED ; zum LOAD des Shifters 0
PIN  87         SHIFTLD1      REGISTERED ; zum LOAD des Shifters 1
PIN  86         SHIFTLD2      REGISTERED ; zum LOAD des Shifters 2
PIN  85         SHIFTLD3      REGISTERED ; zum LOAD des Shifters 3
PIN  84         SHIFTLD4      REGISTERED ; zum LOAD des Shifters 4
PIN  83         SHIFTLD5      REGISTERED ; zum LOAD des Shifters 5
PIN  82         SHIFTLD6      REGISTERED ; zum LOAD des Shifters 6
PIN  81         SHIFTLD7      REGISTERED ; zum LOAD des Shifters 7
PIN  60         PSYNC      COMBINATORIAL ; zum PSYNC des DSP-Port und 74F166
PIN  61         freset     COMBINATORIAL ; local reset fÅr fifos etc
PIN  70         DSPCS0     COMBINATORIAL ; dsp selects
PIN  69         DSPCS1     COMBINATORIAL ; dsp selects
PIN  10         DSPCS2     COMBINATORIAL ; dsp selects
PIN  74         DSPCS3     COMBINATORIAL ; dsp selects
PIN  75         GPIOCS     COMBINATORIAL ; gp i/o selects
PIN  11         void       COMBINATORIAL ; dummy-term
NODE ?          srange0    COMBINATORIAL ; Hilfsterm Breite der Daten
NODE ?          srange1    COMBINATORIAL ; Hilfsterm Breite der Daten
NODE ?          preset        REGISTERED ; programmable reset
NODE ?          range0        REGISTERED ; Breite der Daten (8,16,24,32 Bit)
NODE ?          range1        REGISTERED ; Breite der Daten (8,16,24,32 Bit)
NODE ?          ZP0           REGISTERED ; Play-SCLKzÑhler und Synchro
NODE ?          ZP1           REGISTERED ; Play-SCLKzÑhler und Synchro
NODE ?          ZP2           REGISTERED ; Play-SCLKzÑhler und Synchro
NODE ?          WP0           REGISTERED ; Play-SWORDzÑhler und Synchro
NODE ?          WP1           REGISTERED ; Play-SWORDzÑhler und Synchro
NODE ?          WP2           REGISTERED ; Play-SWORDzÑhler und Synchro
NODE ?          WP3           REGISTERED ; Play-SWORDzÑhler und Synchro
NODE ?          DCLKPLAY      REGISTERED ; fÅr Frequenzerzeugung (double PCLK)
NODE ?          WRESET0       REGISTERED ; play streamsync 0
NODE ?          WRESET1       REGISTERED ; play streamsync 1
NODE ?          WRESET2       REGISTERED ; play streamsync 2
NODE ?          WRESET3       REGISTERED ; play streamsync 3
NODE ?          shiftsel0     REGISTERED ; select shifter 0 for play
NODE ?          shiftsel1     REGISTERED ; select shifter 1 for play
NODE ?          shiftsel2     REGISTERED ; select shifter 2 for play
NODE ?          shiftsel3     REGISTERED ; select shifter 3 for play
NODE ?          shiftsel4     REGISTERED ; select shifter 4 for play
NODE ?          shiftsel5     REGISTERED ; select shifter 5 for play
NODE ?          shiftsel6     REGISTERED ; select shifter 6 for play
NODE ?          shiftsel7     REGISTERED ; select shifter 7 for play
NODE ?          intrec        REGISTERED ; Interrupt-Freigabe record
NODE ?          intplay       REGISTERED ; Interrupt-Freigabe play
NODE ?          myadr         REGISTERED ; pci-adresse ist gÅltig
NODE ?          mydata        REGISTERED ; pci-data ist gÅltig
NODE ?          PSYNC0        REGISTERED ; Erkennung PlaySync FIFO 0
NODE ?          PSYNC1        REGISTERED ; Erkennung PlaySync FIFO 1
NODE ?          PSYNC2        REGISTERED ; Erkennung PlaySync FIFO 2
NODE ?          PSYNC3        REGISTERED ; Erkennung PlaySync FIFO 3
NODE ?          VPSYNC0       REGISTERED ; Erkennung PlaySync FIFO 0
NODE ?          VPSYNC1       REGISTERED ; Erkennung PlaySync FIFO 1
NODE ?          VPSYNC2       REGISTERED ; Erkennung PlaySync FIFO 2
NODE ?          VPSYNC3       REGISTERED ; Erkennung PlaySync FIFO 3
NODE ?          PBLOKATE      REGISTERED ; blokate interrupt play/rec
NODE ?          START         REGISTERED ; fifo is ready (not empty)
NODE ?          INTHLP        REGISTERED ; helpterm for Interrupt
NODE ?          WSET       COMBINATORIAL ; set play streamsync
NODE ?          WCLR       COMBINATORIAL ; reset play streamsync
NODE ?          WRESHLP0   COMBINATORIAL ; reset helpterm for wordreset0
NODE ?          WRESHLP1   COMBINATORIAL ; reset helpterm for wordreset1
NODE ?          WRESHLP2   COMBINATORIAL ; reset helpterm for wordreset2
NODE ?          WRESHLP3   COMBINATORIAL ; reset helpterm for wordreset3
NODE ?          WTST1      COMBINATORIAL ; streamsync mode
NODE ?          WTST0      COMBINATORIAL ; streamsync mode

; ***************************************************************************
; ***************************************************************************

EQUATIONS

void = den * btermo * blast * bterm * linto * breqo;

;***** HOLD: Buszugriff des PLX *********************************************

holda.clkf = ck
holda     := hold            ; darf immer sofort

;***** READY: geUNDet fÅr DMA Register Zugriff Åber PCI *********************

ready      = readyi * readyo * /mydata

breq      = gnd

;***** eigene Schaltung *********************

myadr.clkf = ck;
myadr := /ads * /selm
      + myadr * /mydata;   is my local adress

mydata.clkf = ck;
mydata := myadr;
mydata.rstf = /myadr;

; ---------------------Interrupt-Decoding

INTHLP.CLKF = ck;
INTHLP = intplay * /PAEFLAG3
       + intrec * /RAFFLAG3;

/lint = INTHLP;
lint.trst = INTHLP;

PBLOKATE = /PAEFLAG3 * intplay;
PBLOKATE.CLKF = INTHLP;
PBLOKATE.RSTF = lreset;

/DSPCS0 = la8 * /la7 * /la6 * /la5 * /selm * mydata;

/DSPCS1 = la8 * /la7 * /la6 * la5 * /selm * mydata;

/DSPCS2 = la8 * /la7 * la6 * /la5 * /selm * mydata;

/DSPCS3 = la8 * /la7 * la6 * la5 * /selm * mydata;

; ---------------------Registers

shiftsel0.clkf = /selm * mydata * wr * /la7 * /la6 * /la5 * /la4 * /la3 * /la2;
shiftsel0 := ld0;
shiftsel0.rstf = /lreset;

shiftsel1.clkf = /selm * mydata * wr * /la7 * /la6 * /la5 * /la4 * /la3 * /la2;
shiftsel1 := ld1;
shiftsel1.rstf = /lreset;

shiftsel2.clkf = /selm * mydata * wr * /la7 * /la6 * /la5 * /la4 * /la3 * /la2;
shiftsel2 := ld2;
shiftsel2.rstf = /lreset;

shiftsel3.clkf = /selm * mydata * wr * /la7 * /la6 * /la5 * /la4 * /la3 * /la2;
shiftsel3 := ld3;
shiftsel3.rstf = /lreset;

shiftsel4.clkf = /selm * mydata * wr * /la7 * /la6 * /la5 * /la4 * /la3 * /la2;
shiftsel4 := ld4;
shiftsel4.rstf = /lreset;

shiftsel5.clkf = /selm * mydata * wr * /la7 * /la6 * /la5 * /la4 * /la3 * /la2;
shiftsel5 := ld5;
shiftsel5.rstf = /lreset;

shiftsel6.clkf = /selm * mydata * wr * /la7 * /la6 * /la5 * /la4 * /la3 * /la2;
shiftsel6 := ld6;
shiftsel6.rstf = /lreset;

shiftsel7.clkf = /selm * mydata * wr * /la7 * /la6 * /la5 * /la4 * /la3 * /la2;
shiftsel7 := ld7;
shiftsel7.rstf = /lreset;

range0.clkf = /selm * mydata * wr * /la7 * /la6 * /la5 * /la4 * /la3 * la2;
range0 := ld0;
range0.rstf = /lreset;

range1.clkf = /selm * mydata * wr * /la7 * /la6 * /la5 * /la4 * /la3 * la2;
range1 := ld1;
range1.rstf = /lreset;

intrec.clkf = /selm * mydata * wr * /la7 * /la6 * /la5 * /la4 * /la3 * la2;
intrec := ld2;
intrec.rstf = /lreset;

intplay.clkf = /selm * mydata * wr * /la7 * /la6 * /la5 * /la4 * /la3 * la2;
intplay := ld3;
intplay.rstf = /lreset;

preset.clkf = /selm * mydata * wr * /la7 * /la6 * /la5 * /la4 * /la3 * la2;
preset := ld4;
preset.rstf = /lreset;

fifoload = ld7;
fifoload.clkf = /selm * mydata * wr * /la7 * /la6 * /la5 * /la4 * /la3 * la2;
fifoload.rstf = /lreset

GPIOCS = /la7 * /la6 * /la5 * la4 * /selm * mydata * wr;

smpwrite3.clkf = ck;
smpwrite3 := myadr * wr * la7 * /lbe3;
smpwrite3.rstf = /myadr;

smpwrite2.clkf = ck;
smpwrite2 := myadr * wr * la7 * /lbe2;
smpwrite2.rstf = /myadr;

smpwrite1.clkf = ck;
smpwrite1 := myadr * wr * la7 * /lbe1;
smpwrite1.rstf = /myadr;

smpwrite0.clkf = ck;
smpwrite0 := myadr * wr * la7 * /lbe0;
smpwrite0.rstf = /myadr;

ld0 = shiftsel0 * /la3 * /la2
    + range0 * /la3 * la2
    + PAEFLAG3 * la3 * /la2;
ld0.trst = /la7 * /la6 * /la5 * /la4 * /selm * mydata * /wr;

ld1 = shiftsel1 * /la3 * /la2
    + range1 * /la3 * la2
    + PAFFLAG3 * la3 * /la2;
ld1.trst = /la7 * /la6 * /la5 * /la4 * /selm * mydata * /wr;

ld2 = shiftsel2 * /la3 * /la2
    + intrec * /la3 * la2
    + PEFLAG3 * la3 * /la2;
ld2.trst = /la7 * /la6 * /la5 * /la4 * /selm * mydata * /wr;

ld3 = shiftsel3 * /la3 * /la2
    + intplay * /la3 * la2
    + PBLOKATE * la3 * /la2;
ld3.trst = /la7 * /la6 * /la5 * /la4 * /selm * mydata * /wr;

ld4 = shiftsel4 * /la3 * /la2
    + preset * /la3 * la2;
ld4.trst = /la7 * /la6 * /la5 * /la4 * /selm * mydata * /wr;

ld5 = shiftsel5 * /la3 * /la2;
ld5.trst = /la7 * /la6 * /la5 * /la4 * /selm * mydata * /wr;

ld6 = shiftsel6 * /la3 * /la2;
ld6.trst = /la7 * /la6 * /la5 * /la4 * /selm * mydata * /wr;

ld7 = shiftsel7 * /la3 * /la2
    + fifoload * /la3 * la2;
ld7.trst = /la7 * /la6 * /la5 * /la4 * /selm * mydata * /wr;

; ---------------------Play-Clock 48 kHz

DCLKPLAY.T = VCC;       used for DSP-PCLK,Shift-Clock and internal-clk
DCLKPLAY.CLKF = MCLK24;

CLKPLAY.T = DCLKPLAY;       used for DSP-PCLK,Shift-Clock and internal-clk
CLKPLAY.CLKF = MCLK24;

ZP0.T = VCC;
ZP0.CLKF = CLKPLAY;

ZP1.T = ZP0;
ZP1.CLKF = CLKPLAY;

ZP2.T = ZP0 * ZP1;
ZP2.CLKF = CLKPLAY;

WP0.T = ZP0 * ZP1 * ZP2;
WP0.CLKF = CLKPLAY;

WP1.T = ZP0 * ZP1 * ZP2 * WP0;
WP1.CLKF = CLKPLAY;

WP2.T = ZP0 * ZP1 * ZP2 * WP0 * WP1;
WP2.CLKF = CLKPLAY;

WP3.T = ZP0 * ZP1 * ZP2 * WP0 * WP1 * WP2;
WP3.CLKF = CLKPLAY;

WRESHLP3 = /WP3 * /WP2 * /WP1 * /WP0 * WCLR * /CLKPLAY * /DCLKPLAY
         + /START
         + /freset;

WRESHLP2 = /WP3 * /WP2 * WCLR * /CLKPLAY * /DCLKPLAY * /WP1 * /WP0 * /range0
         + /WP3 * /WP2 * WCLR * /CLKPLAY * /DCLKPLAY * /WP1 * WP0 * range0
         + /START
         + /freset;

WRESHLP1 = /WP3 * /WP2 * WCLR * /CLKPLAY * /DCLKPLAY * /WP1 * /WP0 * /range1
         + /WP3 * /WP2 * WCLR * /CLKPLAY * /DCLKPLAY * /WP1 * WP0 * range1 * /range0
         + /WP3 * /WP2 * WCLR * /CLKPLAY * /DCLKPLAY * WP1 * /WP0 * range1 * range0
         + /START
         + /freset;

WRESHLP0 = /WP3 * /WP2 * WCLR * /CLKPLAY * /DCLKPLAY * /WP1 * /WP0 * /range1 * /range0
         + /WP3 * /WP2 * WCLR * /CLKPLAY * /DCLKPLAY * /WP1 * WP0 * /range1 * range0
         + /WP3 * /WP2 * WCLR * /CLKPLAY * /DCLKPLAY * WP1 * /WP0 * range1 * /range0
         + /WP3 * /WP2 * WCLR * /CLKPLAY * /DCLKPLAY * WP1 * WP0 * range1 * range0
         + /START
         + /freset;

WRESET3 := VCC;
WRESET3.CLKF = START * /WP1 * /WP0 * VPSYNC3 * /PSYNC3 * WSET * CLKPLAY * DCLKPLAY;
WRESET3.RSTF = WRESHLP3;

WRESET2 := VCC;
WRESET2.CLKF = START * /WP1 * WP0 * VPSYNC2 * /PSYNC2 * WSET * CLKPLAY * DCLKPLAY;
WRESET2.RSTF = WRESHLP2;

WRESET1 := VCC;
WRESET1.CLKF = START * WTST1 * VPSYNC1 * /PSYNC1 * WSET * CLKPLAY * DCLKPLAY;
WRESET1.RSTF = WRESHLP1;

WRESET0 := VCC;
WRESET0.CLKF = START * WTST0 * VPSYNC0 * /PSYNC0 * WSET * CLKPLAY * DCLKPLAY;
WRESET0.RSTF = WRESHLP0;

WTST1 = WP1 * /WP0 * range1
      + /WP0 * /range1;

WTST0 = WP1 * WP0 * range1
      + WP0 * /range1 * range0
      + /range1 * /range0;

WSET = /ZP2 * /ZP1 * /ZP0 * shiftsel0
     + /ZP2 * /ZP1 * ZP0 * shiftsel1
     + /ZP2 * ZP1 * /ZP0 * shiftsel2
     + /ZP2 * ZP1 * ZP0 * shiftsel3
     + ZP2 * /ZP1 * /ZP0 * shiftsel4
     + ZP2 * /ZP1 * ZP0 * shiftsel5
     + ZP2 * ZP1 * /ZP0 * shiftsel6
     + ZP2 * ZP1 * ZP0 * shiftsel7;

WCLR = /ZP2 * /ZP1 * /ZP0 * shiftsel0
     + /ZP2 * /ZP1 * ZP0 * /shiftsel0 * shiftsel1
     + /ZP2 * ZP1 * /ZP0 * /shiftsel0 * /shiftsel1 * shiftsel2
     + /ZP2 * ZP1 * ZP0 * /shiftsel0 * /shiftsel1 * /shiftsel2
     * shiftsel3
     + ZP2 * /ZP1 * /ZP0 * /shiftsel0 * /shiftsel1 * /shiftsel2
     * /shiftsel3 * shiftsel4
     + ZP2 * /ZP1 * ZP0 * /shiftsel0 * /shiftsel1 * /shiftsel2
     * /shiftsel3 * /shiftsel4 * shiftsel5
     + ZP2 * ZP1 * /ZP0 * /shiftsel0 * /shiftsel1 * /shiftsel2
     * /shiftsel3 * /shiftsel4 * /shiftsel5 * shiftsel6
     + ZP2 * ZP1 * ZP0 * /shiftsel0 * /shiftsel1 * /shiftsel2
     * /shiftsel3 * /shiftsel4 * /shiftsel5 * /shiftsel6 * shiftsel7;

SHIFTLD0.CLKF = /CLKPLAY * shiftsel0;
/SHIFTLD0 := ZP2 * ZP1 * ZP0;
SHIFTLD0.SETF = /START;

SHIFTLD1.CLKF = /CLKPLAY * shiftsel1;
/SHIFTLD1 = /ZP2 * /ZP1 * /ZP0;
SHIFTLD1.SETF = /START;

SHIFTLD2.CLKF = /CLKPLAY * shiftsel2;
/SHIFTLD2 = /ZP2 * /ZP1 * ZP0;
SHIFTLD2.SETF = /START;

SHIFTLD3.CLKF = /CLKPLAY * shiftsel3;
/SHIFTLD3 = /ZP2 * ZP1 * /ZP0;
SHIFTLD3.SETF = /START;

SHIFTLD4.CLKF = /CLKPLAY * shiftsel4;
/SHIFTLD4 = /ZP2 * ZP1 * ZP0;
SHIFTLD4.SETF = /START;

SHIFTLD5.CLKF = /CLKPLAY * shiftsel5;
/SHIFTLD5 = ZP2 * /ZP1 * /ZP0;
SHIFTLD5.SETF = /START;

SHIFTLD6.CLKF = /CLKPLAY * shiftsel6;
/SHIFTLD6 = ZP2 * /ZP1 * ZP0;
SHIFTLD6.SETF = /START;

SHIFTLD7.CLKF = /CLKPLAY * shiftsel7;
/SHIFTLD7 = ZP2 * ZP1 * /ZP0;
SHIFTLD7.SETF = /START;

/srange1 = WP1 * /WP0 * range1
         + /WP1 * /WP0 * /range1 * range0
         + WP1 * /WP0 * /range1 * range0;

/srange0 = WP1 * WP0 * range1
         + /WP1 * WP0 * /range1 * range0
         + WP1 * WP0 * /range1 * range0
         + /range1 * /range0;

START := VCC;
START.CLKF = /PAFFLAG3 * WP3 * WP2 * WP1 * WP0 * ZP2 * ZP1 * ZP0
           * CLKPLAY * DCLKPLAY;
START.RSTF = /intplay * WP3 * WP2 * WP1 * WP0 * ZP2 * ZP1 * ZP0
             * CLKPLAY * DCLKPLAY * /PEFLAG3;

PRCLK3.CLKF = /CLKPLAY * DCLKPLAY * START;
PRCLK3 := ZP2 * ZP1 * ZP0 * /WRESET3 * shiftsel0 * WP1 * WP0 * range1 * range0
       + /ZP2 * /ZP1 * /ZP0 * /WRESET3 * shiftsel1 * /WP1 * /WP0 * range1 * range0
       + /ZP2 * /ZP1 * ZP0 * /WRESET3 * shiftsel2 * /WP1 * /WP0 * range1 * range0
       + /ZP2 * ZP1 * /ZP0 * /WRESET3 * shiftsel3 * /WP1 * /WP0 * range1 * range0
       + /ZP2 * ZP1 * ZP0 * /WRESET3 * shiftsel4 * /WP1 * /WP0 * range1 * range0
       + ZP2 * /ZP1 * /ZP0 * /WRESET3 * shiftsel5 * /WP1 * /WP0 * range1 * range0
       + ZP2 * /ZP1 * ZP0 * /WRESET3 * shiftsel6 * /WP1 * /WP0 * range1 * range0
       + ZP2 * ZP1 * /ZP0 * /WRESET3 * shiftsel7 * /WP1 * /WP0 * range1 * range0;
PRCLK3.RSTF = CLKPLAY * DCLKPLAY * PRCLK3;

PRCLK2.CLKF = /CLKPLAY * DCLKPLAY * START;
PRCLK2 := ZP2 * ZP1 * ZP0 * /WRESET2 * shiftsel0 * /WP1 * /WP0 * range1
       + /ZP2 * /ZP1 * /ZP0 * /WRESET2 * shiftsel1 * /WP1 * WP0 * range1
       + /ZP2 * /ZP1 * ZP0 * /WRESET2 * shiftsel2 * /WP1 * WP0 * range1
       + /ZP2 * ZP1 * /ZP0 * /WRESET2 * shiftsel3 * /WP1 * WP0 * range1
       + /ZP2 * ZP1 * ZP0 * /WRESET2 * shiftsel4 * /WP1 * WP0 * range1
       + ZP2 * /ZP1 * /ZP0 * /WRESET2 * shiftsel5 * /WP1 * WP0 * range1
       + ZP2 * /ZP1 * ZP0 * /WRESET2 * shiftsel6 * /WP1 * WP0 * range1
       + ZP2 * ZP1 * /ZP0 * /WRESET2 * shiftsel7 * /WP1 * WP0 * range1;
PRCLK2.RSTF = CLKPLAY * DCLKPLAY * PRCLK2;

PRCLK1.CLKF = /CLKPLAY * DCLKPLAY * START;
PRCLK1 := ZP2 * ZP1 * ZP0 * /WRESET1 * shiftsel0 * /WP1 * WP0 * range1
       + ZP2 * ZP1 * ZP0 * /WRESET1 * shiftsel0 * WP0 * /range1 * range0
       + /ZP2 * /ZP1 * /ZP0 * /WRESET1 * shiftsel1 * /srange1
       + /ZP2 * /ZP1 * ZP0 * /WRESET1 * shiftsel2 * /srange1
       + /ZP2 * ZP1 * /ZP0 * /WRESET1 * shiftsel3 * /srange1
       + /ZP2 * ZP1 * ZP0 * /WRESET1 * shiftsel4 * /srange1
       + ZP2 * /ZP1 * /ZP0 * /WRESET1 * shiftsel5 * /srange1
       + ZP2 * /ZP1 * ZP0 * /WRESET1 * shiftsel6 * /srange1
       + ZP2 * ZP1 * /ZP0 * /WRESET1 * shiftsel7 * /srange1;
PRCLK1.RSTF = CLKPLAY * DCLKPLAY * PRCLK1;

PRCLK0.CLKF = /CLKPLAY * DCLKPLAY * START;
PRCLK0 := ZP2 * ZP1 * ZP0 * /WRESET0 * shiftsel0 * WP1 * /WP0 * range1
       + ZP2 * ZP1 * ZP0 * /WRESET0 * shiftsel0 * /WP0 * /range1 * range0
       + ZP2 * ZP1 * ZP0 * /WRESET0 * shiftsel0 * /range1 * /range0
       + /ZP2 * /ZP1 * /ZP0 * /WRESET0 * shiftsel1 * /srange0
       + /ZP2 * /ZP1 * ZP0 * /WRESET0 * shiftsel2 * /srange0
       + /ZP2 * ZP1 * /ZP0 * /WRESET0 * shiftsel3 * /srange0
       + /ZP2 * ZP1 * ZP0 * /WRESET0 * shiftsel4 * /srange0
       + ZP2 * /ZP1 * /ZP0 * /WRESET0 * shiftsel5 * /srange0
       + ZP2 * /ZP1 * ZP0 * /WRESET0 * shiftsel6 * /srange0
       + ZP2 * ZP1 * /ZP0 * /WRESET0 * shiftsel7 * /srange0;
PRCLK0.RSTF = CLKPLAY * DCLKPLAY * PRCLK0;

VPSYNC0 := RD8;
VPSYNC0.CLKF = PRCLK0 * CLKPLAY;
VPSYNC0.RSTF = /START;

PSYNC0 := VPSYNC0;
PSYNC0.CLKF = PRCLK0 * CLKPLAY;
PSYNC0.RSTF = /START;

VPSYNC1 := RD8;
VPSYNC1.CLKF = PRCLK1 * CLKPLAY;
VPSYNC1.RSTF = /START;

PSYNC1 := VPSYNC1;
PSYNC1.CLKF = PRCLK1 * CLKPLAY;
PSYNC1.RSTF = /START;

VPSYNC2 := RD8;
VPSYNC2.CLKF = PRCLK2 * CLKPLAY;
VPSYNC2.RSTF = /START;

PSYNC2 := VPSYNC2;
PSYNC2.CLKF = PRCLK2 * CLKPLAY;
PSYNC2.RSTF = /START;

VPSYNC3 := RD8;
VPSYNC3.CLKF = PRCLK3 * CLKPLAY;
VPSYNC3.RSTF = /START;

PSYNC3 := VPSYNC3;
PSYNC3.CLKF = PRCLK3 * CLKPLAY;
PSYNC3.RSTF = /START;

/freset = /lreset + preset;

; ---------------------PSYNC fÅr DSP-Port (einzelne PSYNC0..7 Åber 74F166)

PSYNC = /WP3 * /WP2 * /WP1;

