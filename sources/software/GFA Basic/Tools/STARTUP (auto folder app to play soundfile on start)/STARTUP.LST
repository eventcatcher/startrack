$m5000
$e$
'
xbs=500
ON ERROR GOSUB ende
compile=BYTE{ADD(BASEPAGE,256)}<>96
acc=({ADD(BASEPAGE,36)}=0)
'
@cookie_init
'
IF acc=TRUE THEN
  ap_id&=APPL_INIT()
  IF ap_id&
    me_id&=MENU_REGISTER(ap_id&,"  Startup-Sound")
    DO
      IF first=0 THEN
        first=1
        accx=TRUE
        GOTO start
      ENDIF
      ~EVNT_MESAG(0)
      IF MENU(1)=40
        accx=TRUE
        GOTO start
      ende:
      ENDIF
    LOOP
  ENDIF
ENDIF
'
'
start:
IF XBIOS(xbs,1)=&H71273800 THEN
  interrupt=XBIOS(xbs,54,-1)
  IF interrupt<>0 THEN
    IF accx=FALSE THEN
      END
    ELSE
      GOTO ende
    ENDIF
  ENDIF
ELSE
  IF accx=FALSE THEN
    END
  ELSE
    GOTO ende
  ENDIF
ENDIF
magix=INT(C:rsc_cookie%(L:CVL("MagX")))          ! COOKIE-ABFRAGE MagiC
REPEAT
  IF INP?(2)=TRUE THEN
    v=INP(2)
  ENDIF
UNTIL INP?(2)=FALSE
IF compile=TRUE THEN
  s$=CHR$(GEMDOS(25)+65)+":"+DIR$(0)+"\"       ! funktioniert als COMPILAT !
ELSE
  s$="D:\"
  RESERVE 5000
ENDIF
IF accx=TRUE THEN
  magix=1
  s$="C:\"
ENDIF
inf$=s$+"STARTUP.INF"
IF EXIST(inf$)=TRUE THEN
  OPEN "I",#1,inf$
  INPUT #1,nonstop$
  INPUT #1,a$
  IF LEFT$(a$,4)="LOOP" THEN
    IF a$="LOOP=TRUE" THEN
      loop=1
    ELSE
      loop=0
    ENDIF
  ENDIF
  CLOSE #1
  IF EXIST(nonstop$)=TRUE THEN
    ~XBIOS(xbs,27,0)  ! to stereomode
    REPEAT
      IF away=FALSE THEN
        IF intplay=FALSE AND nofound=FALSE AND nonstop=FALSE THEN
          @nonstop1
        ENDIF
        IF intplay=FALSE AND nonstop=TRUE AND away=FALSE THEN
          @nonstop2
        ENDIF
      ENDIF
    UNTIL (magix=0 AND INP?(2)=TRUE AND loop=1) OR loop=0 OR away=TRUE OR magix<>0
    IF magix=0 AND INP?(2)=TRUE THEN
      v=INP(2)
    ENDIF
    IF away=FALSE THEN
      @nonstop3
    ENDIF
    intplay=FALSE
    nofound=FALSE
    nonstop=FALSE
    IF accx=FALSE THEN
      END
    ELSE
      GOTO ende
    ENDIF
  ELSE
    PRINT "SAMPLE ("+nonstop$+") NOT FOUND !!!"
    IF accx=FALSE THEN
      END
    ELSE
      GOTO ende
    ENDIF
  ENDIF
ELSE
  PRINT "NO STARTUP-INF ("+inf$+") FOUND !!!"
  IF accx=FALSE THEN
    END
  ELSE
    GOTO ende
  ENDIF
ENDIF
'
> PROCEDURE ende
  PRINT "ERROR ",ERR
  CLOSE
  IF accx=FALSE THEN
    END
  ELSE
    away=TRUE
  ENDIF
RETURN
'
> PROCEDURE nonstop1
  IF demo=FALSE THEN
    vfil$=nonstop$+CHR$(0)
    IF EXIST(vfil$) THEN
      nonstop=TRUE
      nofound=FALSE
      playpos=0
      over=0
      l=0
      fil2$=fil$
      fil$=vfil$
      head=0
      @tstfile
      nper=per
      handle=GEMDOS(61,L:VARPTR(vfil$),0)
      IF handle=0 THEN
        nonstop=FALSE
      ELSE
        playpos=head
        sectors=tmax-head
        g=8
        mb=sectors
        '
        nonstm=MALLOC(sectors)         ! Buffer fÅr Tracker-Caches
        '
        IF nonstm>0 THEN
          IF magix<>0 THEN
            ~XBIOS(xbs,180,L:nonstm)                  ! Treiber macht automatisch MFREE nach play
          ENDIF
          endcount=sectors-playpos
          v=GEMDOS(66,L:playpos,handle,0)     ! SEEK
          bw=GEMDOS(63,handle,L:sectors,L:nonstm)
          IF fileart=3 THEN
            @maschruf28(nonstm,sectors)
          ENDIF
        ELSE
          nonstop=FALSE
        ENDIF
        ~GEMDOS(62,handle)
      ENDIF
    ELSE
      nonstop=FALSE
      nofound=TRUE
    ENDIF
  ELSE
    nonstop=FALSE
  ENDIF
RETURN
'
> PROCEDURE nonstop2
  LOCAL p,b$,g
  ' HARDDISK-PLAY second generation fÅr "nonstop"
  '
  IF demo=FALSE AND sectors>0 THEN
    IF XBIOS(xbs,1)=&H71273800 THEN
      nonhz=hz
      nbypmode=bypmode
      hz=nper
      @fliphz2
      @analog
      @digout(TRUE)
      IF magix=0 THEN
        recback=XBIOS(xbs,122,0,L:nonstm,L:nonstm+sectors,L:0,0,loop)
      ELSE
        recback=XBIOS(xbs,122,99,L:nonstm,L:nonstm+sectors,L:0,0,loop)
      ENDIF
      @write_int(1)
      IF magix=0 AND loop=0 THEN
        REPEAT
          back%=LPEEK(recback+8)
        UNTIL back%=1 OR INP?(2)=TRUE
        IF INP?(2)=TRUE THEN
          v=INP(2)
        ENDIF
      ENDIF
      intplay=TRUE
      peakint=FALSE
      peakexit=recback+8    ! Break-Flag
    ENDIF
  ENDIF
RETURN
'
> PROCEDURE nonstop3
  IF nonstop=TRUE AND magix=0 THEN
    intplay=FALSE
    @write_int(0)
    hz=nonhz
    @fliphz2
    @digout(nbypmode)
    fil$=fil2$
    @digout(FALSE)
    ~MFREE(nonstm)
    nonstm=0
    nofound=FALSE
    nonstop=FALSE
    ~XBIOS(xbs,28,0)          ! 16 Bit
    ~XBIOS(xbs,20,1)          ! Analogeingang benutzen
    ~XBIOS(xbs,25,0)          ! Switch to Bypass-Output
    ~XBIOS(xbs,26,2)          ! recordmode=Achtkanal
    ~XBIOS(xbs,27,2)          ! playmode=Achtkanal
    ~XBIOS(xbs,23,2)          ! Taktrate 44.1 wÑhlen
    ~XBIOS(xbs,160,1)         ! SND-Cookie Emulationmode
    ~XBIOS(&H8B,0,0,0,2,1)    ! DMAPLAY none
    ~XBIOS(&H8B,1,0,0,2,1)    ! DSPXMIT none
    ~XBIOS(&H8B,2,0,0,2,1)    ! EXTINP  none
    ~XBIOS(&H8B,3,15,0,2,1)   ! ADC to DMAREC + DSPREC + EXTOUT + DAC
    ~XBIOS(&H84,1)            ! 16 Bit
    ~XBIOS(&H85,0,0)          ! 2 channels rec/play
    ~XBIOS(&H86,0)            ! Monitoring 0
    ~XBIOS(&H8A,0,7)          ! GPIO als Outputs
    ~XBIOS(&H8A,2,0)          ! GPIO = 0
    ~XBIOS(&H81)              ! unlock
  ENDIF
RETURN
'
> PROCEDURE cookie_init
  INLINE rsc_flyd%,3090
  rsc_cookie%=ADD(rsc_flyd%,INT{ADD(rsc_flyd%,20)})      ! COOKIE-Routine...
RETURN
'
> PROCEDURE maschruf28(start,datalen)
  .| Glob. Var.: sad%,sbd%,mdat2%
  .| Ruft auf  : busy_mouse
  .| Aufruf in : smpsave-2,ldhlp-1,
  ' LOAD-INTEL-DATA
  '
  sad%=start
  sbd%=start+datalen
  ~XBIOS(xbs,316,L:sad%,L:sbd%)
RETURN
'
> PROCEDURE tstfile
  LOCAL t3,t4
  tstf=MALLOC(1024)
  IF tstf<=0 THEN
    CLOSE
    IF accx=FALSE THEN
      END
    ELSE
      away=TRUE
    ENDIF
  ENDIF
  IF away=FALSE THEN
    OPEN "I",#2,fil$
    tmax=LOF(#2)
    datx=tstf
    BGET #2,datx,4
    @fileart
    SEEK #2,0
    @fileart2
    CLOSE #2
    ~MFREE(tstf)
    danf=datx
    '
    IF fileart=1 THEN       ! S16
      x=PEEK(danf+7)                            ! Periodendauer eines Samples
      y=DPEEK(danf+8)                           ! Periodendauer eines Samples
      per=INT(10^9/(x*65536+y))
      perm=INT(per/100)*100
      per=INT(perm)
      t3=PEEK(danf+13)                           ! Sustain Loop-Start
      t4=DPEEK(danf+14)                          ! Sustain Loop-Start
      tmin=t3*65536+t4
      t3=DPEEK(danf+16)                          ! Sustain Loop-End
      t4=PEEK(danf+18)                           ! Sustain Loop-End
      tmax=t3*256+t4
      head=20   ! HeaderlÑnge fÅr S16-Files
    ENDIF
    IF fileart=2 THEN        ! AVR
      tst1=DPEEK(danf+12)    ! mode
      tst2=DPEEK(danf+14)    ! resolution
      IF tst2=16 THEN
        @setbitrate16
      ENDIF
      IF tst2=24 THEN
        @setbitrate24
      ENDIF
      tst3=DPEEK(danf+16)    ! sign
      IF tst1=&HFFFF AND (tst2=16 OR tst2=24) AND tst3=&HFFFF THEN
        per=DPEEK(danf+24)    ! Sample-Rate
      ENDIF
      head=128   ! HeaderlÑnge fÅr AVR-Files
    ENDIF
    IF fileart=3 THEN        ! WAV
      tst1=LPEEK(danf+8)     ! "WAVE"
      tst2=LPEEK(danf+12)    ! "fmt "
      tst3=PEEK(danf+20)     ! format
      tst4=PEEK(danf+22)     ! channels
      tst5=PEEK(danf+32)     ! align
      tst6=PEEK(danf+34)     ! bps
      IF tst6=16 THEN
        @setbitrate16
      ENDIF
      IF tst6=24 THEN
        @setbitrate24
      ENDIF
      IF tst1=&H57415645 AND tst2=&H666D7420 AND tst3=1 AND tst4=2 AND tst5=4 AND (tst6=16 OR tst6=24) THEN
        per=PEEK(danf+24)+256*PEEK(danf+25)    ! Sample-Rate
      ENDIF
      head=44   ! HeaderlÑnge fÅr AVR-Files
    ENDIF
    IF fileart=4 THEN        ! AU
      tst1=LPEEK(danf+12)    ! dataformat
      tst2=LPEEK(danf+20)    ! channelcount
      IF tst1=3 AND tst2=2 THEN
        per=LPEEK(danf+16)    ! Sample-Rate
      ENDIF
      head=28   ! HeaderlÑnge fÅr AVR-Files
    ENDIF
    IF fileart=5 THEN         ! SD
      per=LPEEK(danf+1020)    ! Sample-Rate
      head=1336 ! HeaderlÑnge fÅr SD-Files
    ENDIF
    IF fileart=6 THEN         ! SMP
      tst1=DPEEK(danf+76)     ! Bits
      IF tst1=16 THEN
        per=LPEEK(danf+72)     ! Sample-Rate
      ENDIF
      head=296 ! HeaderlÑnge fÅr SD-Files
    ENDIF
    IF fileart=7 THEN        ! AIFF
      tst1=LPEEK(danf+8)     ! AIFF-Kennung
      tst2=LPEEK(danf+12)    ! COMM-Kennung
      tst3=DPEEK(danf+20)    ! Channels
      tst4=LPEEK(danf+38)    ! SSND-Kennung
      tst5=DPEEK(danf+26)    ! Bits
      IF tst5=16 THEN
        @setbitrate16
      ENDIF
      IF tst5=24 THEN
        @setbitrate24
      ENDIF
      IF tst1=&H41494646 AND tst2=&H434F4D4D AND tst3=2 AND tst4=&H53534E44 AND (tst5=16 OR tst5=24) THEN
        per=DPEEK(danf+30)     ! Sample-Rate
      ENDIF
      head=54+458   ! HeaderlÑnge fÅr AIFF-Files
    ENDIF
    IF fileart<>0 THEN
      @ldhztest
    ENDIF
    sectors=f
  ENDIF
RETURN
'
> PROCEDURE setbitrate16
  dig24=FALSE
  mbit=4
  IF demo=FALSE THEN
    ~XBIOS(xbs,28,0)
  ENDIF
  IF ext$="S16" OR ext$="S24" THEN
    ext$="S16"
  ENDIF
  IF ext2$="S16" OR ext2$="S24" THEN
    ext2$="S16"
  ENDIF
RETURN
'
> PROCEDURE setbitrate24
  dig24=TRUE
  mbit=6
  IF demo=FALSE THEN
    ~XBIOS(xbs,28,1)
  ENDIF
  IF ext$="S16" OR ext$="S24" THEN
    ext$="S24"
  ENDIF
  IF ext2$="S16" OR ext2$="S24" THEN
    ext2$="S24"
  ENDIF
RETURN
'
> PROCEDURE fileart
  head=0
  fileart=0
  abz=DPEEK(datx)
  abz2=LPEEK(datx)
  IF abz=&HF07E THEN
    head=20   ! HeaderlÑnge fÅr S16-Files
    fileart=1
    IF RIGHT$(fil$,4)=".S16" THEN
      @setbitrate16
    ENDIF
    IF RIGHT$(fil$,4)=".S24" THEN
      @setbitrate24
    ENDIF
  ENDIF
  IF abz2=&H32424954 THEN
    head=128   ! HeaderlÑnge fÅr AVR-Files
    fileart=2
  ENDIF
  IF abz2=&H52494646 THEN
    head=44   ! HeaderlÑnge fÅr WAV-Files
    fileart=3
  ENDIF
  IF abz2=&H2E736E64 THEN
    head=28   ! HeaderlÑnge fÅr AU und SND-Files
    fileart=4
  ENDIF
  abz=head
  IF abz2=&H538000C THEN
    head=1336 ! HeaderlÑnge fÅr SD-Files
    fileart=5
    IF virtld=FALSE THEN
      ln=ln*2
    ENDIF
    abz=head*2+8
  ENDIF
  IF abz2=&HF07E0001 THEN
    head=296 ! HeaderlÑnge fÅr Avalon SMP-Files
    fileart=6
    IF virtld=FALSE THEN
      ln=ln*2
    ENDIF
    abz=head*2+8
  ENDIF
  IF abz2=&H464F524D THEN
    head=54+458   ! HeaderlÑnge fÅr AIFF-Files
    fileart=7
  ENDIF
RETURN
'
> PROCEDURE fileart2
  IF fileart=6 THEN
    SEEK #2,LOF(#2)-head
  ENDIF
  BGET #2,datx,head
  IF fileart=6 THEN
    SEEK #2,20
  ENDIF
RETURN
'
> PROCEDURE ldhztest
  .| Glob. Var.: extclock#,per#,hz#,nr#,smp16&,a$,popups&,ad32&,rate2&,ad44&
  .|     ad48&,retime#,hzm#,sblock#,sret#,smpedit&,fileart#,smppmark&
  .| Ruft auf  : textfeld,adlow,admid,adhigh,setbutton
  .| Aufruf in : ldhlp-6,ldhead-1,
  hz=per
  @fliphz2
  IF per<>8000 AND per<>11000 AND per<>12000 AND per<>16000 AND per<>17000 AND per<>22000 AND per<>24000 AND per<>33000 AND per<>66000 AND per<>128 AND per<>192 AND per<>256 AND per<>384 AND per<>32000 AND per<>44100 AND per<>48000 THEN
    IF per<>88200 AND per<>96000 THEN
      retime=1
      per=INT(per/100)*100
      hz=per
      hzm=hz
    ENDIF
  ENDIF
RETURN
'
> PROCEDURE fliphz2
  IF hz=32000 THEN
    @adlow
  ENDIF
  IF hz=44100 THEN
    @admid
  ENDIF
  IF hz=48000 THEN
    @adhigh
  ENDIF
  IF hz=88200 THEN
    @admid96
  ENDIF
  IF hz=96000 THEN
    @adhigh96
  ENDIF
  IF hz=8000 THEN
    @ad8
  ENDIF
  IF hz=11000 THEN
    @ad11
  ENDIF
  IF hz=12000 THEN
    @ad12
  ENDIF
  IF hz=16000 THEN
    @ad16
  ENDIF
  IF hz=17000 THEN
    @ad17
  ENDIF
  IF hz=22000 THEN
    @ad22
  ENDIF
  IF hz=24000 THEN
    @ad24
  ENDIF
  IF hz=33000 THEN
    @ad33
  ENDIF
  IF hz=768 THEN
    @adexth2
  ENDIF
  IF hz=512 THEN
    @adextl2
  ENDIF
  IF hz=384 THEN
    @adexth1
  ENDIF
  IF hz=256 THEN
    @adextl1
  ENDIF
RETURN
'
> PROCEDURE adlow
  hz=32000
  clk=1
  mod96=FALSE
  @adctrl
RETURN
'
> PROCEDURE admid
  hz=44100
  clk=2
  mod96=FALSE
  @adctrl
RETURN
'
> PROCEDURE adhigh
  hz=48000
  clk=3
  mod96=FALSE
  @adctrl
RETURN
'
> PROCEDURE admid96
  hz=88200
  clk=2
  mod96=TRUE
  @adctrl
RETURN
'
> PROCEDURE adhigh96
  hz=96000
  clk=3
  mod96=TRUE
  @adctrl
RETURN
'
> PROCEDURE ad8
  hz=8000
  clk=4
  mod96=FALSE
  @adctrl
RETURN
'
> PROCEDURE ad11
  hz=11000
  clk=5
  mod96=FALSE
  @adctrl
RETURN
'
> PROCEDURE ad12
  hz=12000
  clk=6
  mod96=FALSE
  @adctrl
RETURN
'
> PROCEDURE ad16
  hz=16000
  clk=7
  mod96=FALSE
  @adctrl
RETURN
'
> PROCEDURE ad17
  hz=17000
  clk=8
  mod96=FALSE
  @adctrl
RETURN
'
> PROCEDURE ad22
  hz=22000
  clk=9
  mod96=FALSE
  @adctrl
RETURN
'
> PROCEDURE ad24
  hz=24000
  clk=10
  mod96=FALSE
  @adctrl
RETURN
'
> PROCEDURE ad33
  hz=33000
  clk=11
  mod96=FALSE
  @adctrl
RETURN
'
> PROCEDURE adexth2
  hz=768
  clk=12
  mod96=FALSE
  @adctrl
RETURN
'
> PROCEDURE adextl2
  hz=512
  clk=13
  mod96=FALSE
  @adctrl
RETURN
'
> PROCEDURE adexth1
  hz=384
  clk=14
  mod96=FALSE
  @adctrl
RETURN
'
> PROCEDURE adextl1
  hz=256
  clk=15
  mod96=FALSE
  @adctrl
RETURN
'
> PROCEDURE adctrl
  @analog
RETURN
'
> PROCEDURE analog
  .| Glob. Var.: extclock#,stl#,digana#,clk#,ad#,nr#,smp16&,a$,popups&,analog&
  .|     input&
  .| Ruft auf  : write_reglow,textfeld,makehz
  .| Aufruf in : digout-1,adlow-1,admid-1,adhigh-1,do_main-1,arrsethz-1
  .|     traksethz-1,trkplay-1,arrmidplay-1,arrplay-1,setup2-1,smpplay-2
  .|     smppmhlp-1,
  IF demo=FALSE THEN
    ~XBIOS(xbs,20,1)   ! Analogeingang benutzen
    ~XBIOS(xbs,23,clk) ! Taktrate wÑhlen
  ENDIF
  ad=1
RETURN
'
> PROCEDURE digout(swert!)
  .| Glob. Var.: sth#,extclock#,digana#,ad#,stl#,clk#
  .| Ruft auf  : write_reghigh,write_reglow,digital,digin,analog
  .| Aufruf in : maschruf2-1,maschinit2b-1,maschinit5b-1,maschruf18-1
  .|     maschruf18b-1,newfsel-4,arrsethz-1,traksethz-1,trakforw-4,trkbackw-4
  .|     trkplay-3,arrplay-3,virtual-2,mforw-4,mbackw-4,monitor-2,smpplay-2
  .|     smpauto-1,record-1,
  bypmode=swert!
  IF swert!=TRUE THEN
    IF demo=FALSE THEN
      ~XBIOS(xbs,25,1) ! Switch to PLAY-Output
      ~XBIOS(xbs,20,1)   ! Analogeingang benutzen
      ~XBIOS(xbs,23,clk) ! Taktrate wÑhlen
    ENDIF
  ENDIF
  IF swert!=FALSE THEN
    @digin
    @analog
  ENDIF
RETURN
'
> PROCEDURE write_int(a)
  LOCAL b
  IF demo=FALSE THEN
    IF a>0 THEN
      intnr=a
    ENDIF
    IF falcon=FALSE THEN
      ~XBIOS(xbs,54,a)
      IF a=0 THEN
        ~XBIOS(xbs,55,0)
      ENDIF
    ELSE
      b=0
      IF a=1 OR a=3 THEN
        b=b+1
      ENDIF
      IF a=2 OR a=3 THEN
        b=b+4
      ENDIF
      ~XBIOS(&H88,b)
    ENDIF
  ENDIF
RETURN
'
> PROCEDURE digin
  .| Glob. Var.: sth#
  .| Ruft auf  : write_reghigh
  .| Aufruf in : digout-1,arrmidplay-2,smpplay-2,smppmhlp-2,
  IF demo=FALSE THEN
    ~XBIOS(xbs,25,0) ! Switch to Bypass-Output
  ENDIF
RETURN
